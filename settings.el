(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Info-fit-frame-flag nil)
 '(TeX-PDF-mode t)
 '(TeX-electric-escape t)
 '(TeX-engine (quote xetex))
 '(TeX-expand-list (quote (("%p" TeX-printer-query) ("%q" (lambda nil (TeX-printer-query t))) ("%V" (lambda nil (TeX-source-correlate-start-server-maybe) (TeX-view-command-raw))) ("%vv" (lambda nil (TeX-source-correlate-start-server-maybe) (TeX-output-style-check TeX-output-view-style))) ("%v" (lambda nil (TeX-source-correlate-start-server-maybe) (TeX-style-check TeX-view-style))) ("%r" (lambda nil (TeX-style-check TeX-print-style))) ("%l" (lambda nil (TeX-style-check LaTeX-command-style))) ("%(PDF)" (lambda nil (if (and (eq TeX-engine (quote default)) (or TeX-PDF-mode TeX-DVI-via-PDFTeX)) "pdf" ""))) ("%(PDFout)" (lambda nil (cond ((and (eq TeX-engine (quote xetex)) (not TeX-PDF-mode)) " -no-pdf") ((and (eq TeX-engine (quote luatex)) (not TeX-PDF-mode)) " --output-format=dvi") ((and (eq TeX-engine (quote default)) (not TeX-PDF-mode) TeX-DVI-via-PDFTeX) " \"\\pdfoutput=0 \"") (t "")))) ("%(mode)" (lambda nil (if TeX-interactive-mode "" " -interaction=nonstopmode"))) ("%(o?)" (lambda nil (if (eq TeX-engine (quote omega)) "o" ""))) ("%(tex)" (lambda nil (eval (nth 2 (assq TeX-engine (TeX-engine-alist)))))) ("%(latex)" (lambda nil (eval (nth 3 (assq TeX-engine (TeX-engine-alist)))))) ("%(execopts)" ConTeXt-expand-options) ("%S" TeX-source-correlate-expand-options) ("%dS" TeX-source-specials-view-expand-options) ("%cS" TeX-source-specials-view-expand-client) ("%(outpage)" (lambda nil (if TeX-source-correlate-output-page-function (funcall TeX-source-correlate-output-page-function) "1"))) ("%s" file nil t) ("%t" file t t) ("%`" (lambda nil (setq TeX-command-pos t TeX-command-text ""))) (" \"\\" (lambda nil (if (eq TeX-command-pos t) (setq TeX-command-pos pos pos (+ 3 pos)) (setq pos (1+ pos))))) ("\"" (lambda nil (if (numberp TeX-command-pos) (setq TeX-command-text (concat TeX-command-text (substring command TeX-command-pos (1+ pos))) command (concat (substring command 0 TeX-command-pos) (substring command (1+ pos))) pos TeX-command-pos TeX-command-pos t) (setq pos (1+ pos))))) ("%'" (lambda nil (prog1 (if (stringp TeX-command-text) (progn (setq pos (+ (length TeX-command-text) 9) TeX-command-pos (and (string-match " " (funcall file t t)) "\"")) (concat TeX-command-text " \"\\input\"")) (setq TeX-command-pos nil) "") (setq TeX-command-text nil)))) ("%n" TeX-current-line) ("%d" file "dvi" t) ("%f" file "ps" t) ("%o" (lambda nil (funcall file (TeX-output-extension) t))) ("%b" TeX-current-file-name-master-relative) ("%m" preview-create-subdirectory) ("%O" (lambda nil (expand-file-name (funcall file (TeX-output-extension) t)))))))
 '(TeX-view-program-list (quote (("Skim" ("osascript" " ~/bin/skim-gotopage.script" " %O" (mode-io-correlate " %(outpage)"))))))
 '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Skim") (output-html "xdg-open"))))
 '(ac-auto-show-menu 1.0)
 '(ac-auto-start 3)
 '(ac-dwim nil)
 '(ac-ignore-case nil)
 '(ac-use-fuzzy nil)
 '(after-save-hook (quote (executable-make-buffer-file-executable-if-script-p)))
 '(align-c++-modes (quote (csharp-mode c++-mode c-mode java-mode groovy-mode)))
 '(align-to-tab-stop nil)
 '(ansi-color-names-vector ["black" "red" "green" "brown" "blue" "magenta" "blue" "white"])
 '(auto-save-interval 1024)
 '(bm-highlight-style (quote bm-highlight-only-fringe))
 '(browse-url-browser-function (quote ((".*" . browse-url-default-macosx-browser))))
 '(byte-compile-verbose nil)
 '(c-default-style (quote ((java-mode . "gnu") (awk-mode . "awk") (other . "gnu"))))
 '(calendar-daylight-time-zone-name "CDT")
 '(calendar-latitude 40.73471)
 '(calendar-longitude -89.554659)
 '(calendar-mark-holidays-flag t)
 '(calendar-standard-time-zone-name "CST")
 '(calendar-time-zone -420)
 '(canlock-password "8d2ee9a7e4658c4ff6d863f91a3dd5340b3918ec")
 '(compilation-context-lines 10)
 '(compilation-skip-threshold 2)
 '(current-language-environment "UTF-8")
 '(custom-buffer-done-function (quote kill-buffer))
 '(custom-raised-buttons nil)
 '(default-input-method "latin-1-prefix")
 '(delete-by-moving-to-trash t)
 '(delete-old-versions (quote none))
 '(doc-view-resolution 300)
 '(emms-player-mplayer-parameters (quote ("-slave" "-quiet" "-really-quiet" "-volume" "15")))
 '(emms-source-file-default-directory "/Volumes/Data/Music/iTunes/iTunes Media/")
 '(erc-autojoin-channels-alist (quote (("localhost" "&bitlbee") ("freenode.net" "#emacs-ops" "#haskell" "#haskell-in-depth" "#haskell-overflow" "#haskell-blah" "#haskell-ops" "#haskell-lens" "#scannedinavian" "#ledger" "##categorytheory" "#agda" "#coq" "#git" "#emacs" "#ghc") ("well-typed.com" "#fpcomplete") ("oftc.net" "#llvm"))))
 '(erc-fools (quote ("JordiGH" "nyc")))
 '(erc-ignore-list (quote ("rudybot!.*")))
 '(erc-keywords (quote ("wiegley" "ledger" "eshell")))
 '(erc-log-channels-directory "~/Messages/ERC")
 '(erc-modules (quote (autojoin button completion dcc fill identd irccontrols list log match menu move-to-prompt netsplit networks noncommands readonly replace ring scrolltobottom services smiley stamp spelling track truncate highlight-nicknames)))
 '(erc-nick "johnw")
 '(erc-port 6667)
 '(erc-prompt-for-nickserv-password nil)
 '(exec-path (quote ("/Users/johnw/bin" "/usr/local/bin" "/usr/local/opt/git/share/git-core" "/usr/bin" "/bin" "/usr/local/sbin" "/usr/sbin" "/sbin" "/usr/X11R6/bin")))
 '(fill-column 78)
 '(frame-title-format (quote (:eval (concat (if buffer-file-name default-directory "%b") "    " (number-to-string (cdr (assq (quote width) (frame-parameters)))) "x" (number-to-string (cdr (assq (quote height) (frame-parameters))))))) t)
 '(gdb-find-source-frame t)
 '(gdb-same-frame nil)
 '(global-font-lock-mode t nil (font-lock))
 '(ido-save-directory-list-file "~/.emacs.d/data/ido.last")
 '(inhibit-startup-echo-area-message "johnw")
 '(inhibit-startup-screen t)
 '(ipa-overlay-position "above")
 '(ispell-extra-args (quote ("--sug-mode=fast" "--keyboard=dvorak")))
 '(large-file-warning-threshold nil)
 '(next-line-add-newlines nil)
 '(ps-font-size (quote (8 . 10)))
 '(ps-footer-font-size (quote (12 . 14)))
 '(ps-header-font-size (quote (12 . 14)))
 '(ps-header-title-font-size (quote (14 . 16)))
 '(ps-line-number-font-size 10)
 '(ps-print-color-p nil)
 '(regex-tool-backend (quote perl))
 '(safe-local-variable-values (quote ((eval require (quote edg)) (eval ignore-errors (require (quote edg))) (after-save-hook my-byte-recompile-file) (after-save-hook git-commit-changes) (org-refer-by-number-id . "1C72AB51-33C2-4FF8-9367-2B494D125027"))))
 '(session-registers (quote (t (0 . 127))))
 '(show-paren-delay 0)
 '(smart-compile-alist (quote (((lambda (buf) (let ((case-fold-search t)) (and (string-match "/ansi/" (buffer-file-name buf)) (string-match "/opencl" (shell-command-to-string "git symbolic-ref HEAD"))))) . "cd ~/Contracts/TI/src/c60_iaansi ; ~/Contracts/TI/bin/build.sh c60") ((lambda (buf) (let ((case-fold-search t)) (and (string-match "/\\(src/ansi\\|src/.*?ansi\\)/" (buffer-file-name buf)) (string-match "/merge_4_2" (shell-command-to-string "git symbolic-ref HEAD"))))) . "cd ~/Contracts/TI/src/msp_iaansi ; ~/Contracts/TI/bin/build.sh msp") ((lambda (buf) (string-match "/\\(\\(src\\|Projects\\)/ledger\\)/" (buffer-file-name buf))) . "cd ~/src/ledger ; ~/src/ledger/tools/build.sh debug") ((lambda (buf) (string-match "/emacs/" (buffer-file-name buf))) . "emacs-build release macport opt make") (emacs-lisp-mode emacs-lisp-byte-compile-and-load) ((lambda (buf) (string-match "/\\(cree\\|EDG/Projects/edg\\)/" (buffer-file-name buf))) . "cd ~/Products/cree/edg && (ninja && ctest -j$(ncpu)) & (cd ~/src/cree; mktags src ext/llvm) & wait"))))
 '(tail-max-size 25)
 '(tail-volatile nil)
 '(tramp-default-method "rsyncc")
 '(undo-limit 800000)
 '(user-full-name "John Wiegley")
 '(user-initials "jww")
 '(user-mail-address "jwiegley@gmail.com")
 '(visible-bell t)
 '(w3m-cookie-accept-bad-cookies (quote ask))
 '(w3m-default-display-inline-images t)
 '(w3m-use-cookies t)
 '(weblogger-config-alist (quote (("newartisans" "http://www.newartisans.com/xmlrpc.php" "johnw" "" "5"))))
 '(zencoding-preview-default nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(diff-added ((((background dark)) (:foreground "#FFFF9B9BFFFF")) (t (:foreground "DarkGreen"))))
 '(diff-added2 ((t (:foreground "SeaGreen"))))
 '(diff-changed ((((background dark)) (:foreground "Yellow")) (t (:foreground "MediumBlue"))))
 '(diff-context ((((background dark)) (:foreground "White")) (t (:foreground "Black"))))
 '(diff-file-header ((((background dark)) (:foreground "Cyan" :background "Black")) (t (:foreground "Red" :background "White"))))
 '(diff-header ((((background dark)) (:foreground "Cyan")) (t (:foreground "Red"))))
 '(diff-hunk-header ((t (:background "grey90" :foreground "black"))))
 '(diff-index ((((background dark)) (:foreground "Magenta")) (t (:foreground "Green"))))
 '(diff-nonexistent ((((background dark)) (:foreground "#FFFFFFFF7474")) (t (:foreground "DarkBlue"))))
 '(diff-removed ((t (:foreground "firebrick"))))
 '(diff-removed2 ((t (:foreground "Orange"))))
 '(erc-timestamp-face ((t (:foreground "dark violet"))))
 '(flycheck-error-face ((t (:background "LightPink"))))
 '(flycheck-warning-face ((t (:background "DeepSkyBlue"))))
 '(font-lock-comment-face ((((class color)) (:foreground "firebrick"))))
 '(helm-M-x-key ((t (:foreground "dark red" :underline t))))
 '(helm-candidate-number ((t (:background "#faffb5" :foreground "black"))))
 '(helm-selection ((t (:background "#b5ffd1" :underline t))))
 '(helm-separator ((t (:foreground "#ffbfb5"))))
 '(helm-source-header ((t (:background "#abd7f0" :foreground "black" :underline t))))
 '(helm-visible-mark ((t (:background "#d1f5ae"))))
 '(hl-line ((t (:background "cornsilk"))))
 '(ledger-register-pending-face ((t (:weight bold))))
 '(lusty-match-face ((t (:inherit helm-match))))
 '(magit-branch-face ((((class color) (background light)) (:foreground "Blue"))))
 '(magit-diff-none-face ((((class color) (background light)) (:foreground "grey50"))))
 '(magit-header ((t (:weight bold))))
 '(magit-topgit-current ((t nil)))
 '(match ((t (:background "light cyan"))))
 '(slime-highlight-edits-face ((((class color) (background light)) (:background "gray98"))))
 '(trailing-whitespace ((((class color) (background light)) (:background "light salmon"))))
 '(wg-brace-face ((((class color)) (:foreground "dark slate blue"))))
 '(wg-command-face ((((class color)) (:foreground "dark cyan"))))
 '(wg-current-workgroup-face ((((class color)) (:foreground "black"))))
 '(wg-divider-face ((((class color)) (:foreground "dark slate blue"))))
 '(wg-filename-face ((((class color)) (:foreground "dark blue"))))
 '(wg-frame-face ((((class color)) (:foreground "black"))))
 '(wg-message-face ((((class color)) (:foreground "dark blue"))))
 '(wg-mode-line-face ((((class color)) (:foreground "dark blue"))))
 '(wg-other-workgroup-face ((((class color)) (:foreground "dark slate grey"))))
 '(wg-previous-workgroup-face ((((class color)) (:foreground "dark blue"))))
 '(whitespace-line ((t (:background "lemon chiffon" :foreground "dark violet")))))
